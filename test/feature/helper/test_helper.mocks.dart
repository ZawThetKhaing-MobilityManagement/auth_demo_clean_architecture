// Mocks generated by Mockito 5.4.4 from annotations
// in demo_login_ui/test/feature/helper/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:convert' as _i13;
import 'dart:typed_data' as _i15;

import 'package:dartz/dartz.dart' as _i3;
import 'package:demo_login_ui/core/error/failure.dart' as _i8;
import 'package:demo_login_ui/core/usecase/usecase.dart' as _i10;
import 'package:demo_login_ui/features/login/data/datasource/localDataSource/user_local_data_source.dart'
    as _i6;
import 'package:demo_login_ui/features/login/data/datasource/remoteDataSource/authentication_remote_data_source.dart'
    as _i5;
import 'package:demo_login_ui/features/login/data/model/user_model.dart' as _i9;
import 'package:demo_login_ui/features/login/data/repository/authentication_repository_impl.dart'
    as _i16;
import 'package:demo_login_ui/features/login/domain/entities/user_entity.dart'
    as _i12;
import 'package:demo_login_ui/features/login/domain/repositories/authentication_repository.dart'
    as _i11;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i14;
import 'package:shared_preferences/shared_preferences.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClient_0 extends _i1.SmartFake implements _i2.Client {
  _FakeClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSharedPreferences_2 extends _i1.SmartFake
    implements _i4.SharedPreferences {
  _FakeSharedPreferences_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_3 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_4 extends _i1.SmartFake
    implements _i2.StreamedResponse {
  _FakeStreamedResponse_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserRemoteDataSource_5 extends _i1.SmartFake
    implements _i5.UserRemoteDataSource {
  _FakeUserRemoteDataSource_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserLocalDataSource_6 extends _i1.SmartFake
    implements _i6.UserLocalDataSource {
  _FakeUserLocalDataSource_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserRemoteDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRemoteDataSourceImpl extends _i1.Mock
    implements _i5.UserRemoteDataSourceImpl {
  @override
  _i2.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_0(
          this,
          Invocation.getter(#client),
        ),
        returnValueForMissingStub: _FakeClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.Client);

  @override
  _i7.Future<_i3.Either<_i8.Faliure, _i9.UserModel>> signUpwithEmailandPassword(
          _i10.SignInParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUpwithEmailandPassword,
          [params],
        ),
        returnValue: _i7.Future<_i3.Either<_i8.Faliure, _i9.UserModel>>.value(
            _FakeEither_1<_i8.Faliure, _i9.UserModel>(
          this,
          Invocation.method(
            #signUpwithEmailandPassword,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.Either<_i8.Faliure, _i9.UserModel>>.value(
                _FakeEither_1<_i8.Faliure, _i9.UserModel>(
          this,
          Invocation.method(
            #signUpwithEmailandPassword,
            [params],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Faliure, _i9.UserModel>>);
}

/// A class which mocks [UserLocalDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserLocalDataSourceImpl extends _i1.Mock
    implements _i6.UserLocalDataSourceImpl {
  @override
  _i4.SharedPreferences get sharedPreferences => (super.noSuchMethod(
        Invocation.getter(#sharedPreferences),
        returnValue: _FakeSharedPreferences_2(
          this,
          Invocation.getter(#sharedPreferences),
        ),
        returnValueForMissingStub: _FakeSharedPreferences_2(
          this,
          Invocation.getter(#sharedPreferences),
        ),
      ) as _i4.SharedPreferences);

  @override
  _i7.Future<_i3.Either<_i8.Faliure, _i9.UserModel>> getCached() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCached,
          [],
        ),
        returnValue: _i7.Future<_i3.Either<_i8.Faliure, _i9.UserModel>>.value(
            _FakeEither_1<_i8.Faliure, _i9.UserModel>(
          this,
          Invocation.method(
            #getCached,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.Either<_i8.Faliure, _i9.UserModel>>.value(
                _FakeEither_1<_i8.Faliure, _i9.UserModel>(
          this,
          Invocation.method(
            #getCached,
            [],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Faliure, _i9.UserModel>>);

  @override
  _i7.Future<bool> setCached(_i9.UserModel? modelToCached) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCached,
          [modelToCached],
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
}

/// A class which mocks [AuthenticationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationRepository extends _i1.Mock
    implements _i11.AuthenticationRepository {
  @override
  _i7.Future<_i3.Either<_i8.Faliure, _i12.UserEntity>> signUp(
          {required _i10.SignInParams? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUp,
          [],
          {#params: params},
        ),
        returnValue: _i7.Future<_i3.Either<_i8.Faliure, _i12.UserEntity>>.value(
            _FakeEither_1<_i8.Faliure, _i12.UserEntity>(
          this,
          Invocation.method(
            #signUp,
            [],
            {#params: params},
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.Either<_i8.Faliure, _i12.UserEntity>>.value(
                _FakeEither_1<_i8.Faliure, _i12.UserEntity>(
          this,
          Invocation.method(
            #signUp,
            [],
            {#params: params},
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Faliure, _i12.UserEntity>>);

  @override
  _i7.Future<_i3.Either<_i8.Faliure, _i12.UserEntity?>> authUser() =>
      (super.noSuchMethod(
        Invocation.method(
          #authUser,
          [],
        ),
        returnValue:
            _i7.Future<_i3.Either<_i8.Faliure, _i12.UserEntity?>>.value(
                _FakeEither_1<_i8.Faliure, _i12.UserEntity?>(
          this,
          Invocation.method(
            #authUser,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.Either<_i8.Faliure, _i12.UserEntity?>>.value(
                _FakeEither_1<_i8.Faliure, _i12.UserEntity?>(
          this,
          Invocation.method(
            #authUser,
            [],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Faliure, _i12.UserEntity?>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i2.Client {
  @override
  _i7.Future<_i2.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i2.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i2.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<_i2.Response>);

  @override
  _i7.Future<_i2.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i2.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i2.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<_i2.Response>);

  @override
  _i7.Future<_i2.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i13.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i2.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i2.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i2.Response>);

  @override
  _i7.Future<_i2.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i13.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i2.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i2.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i2.Response>);

  @override
  _i7.Future<_i2.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i13.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i2.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i2.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i2.Response>);

  @override
  _i7.Future<_i2.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i13.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i2.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i2.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i2.Response>);

  @override
  _i7.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<String>.value(_i14.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<String>.value(_i14.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<String>);

  @override
  _i7.Future<_i15.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i15.Uint8List>.value(_i15.Uint8List(0)),
        returnValueForMissingStub:
            _i7.Future<_i15.Uint8List>.value(_i15.Uint8List(0)),
      ) as _i7.Future<_i15.Uint8List>);

  @override
  _i7.Future<_i2.StreamedResponse> send(_i2.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i7.Future<_i2.StreamedResponse>.value(_FakeStreamedResponse_4(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i2.StreamedResponse>.value(_FakeStreamedResponse_4(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i7.Future<_i2.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AuthenticationRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationRepositoryImpl extends _i1.Mock
    implements _i16.AuthenticationRepositoryImpl {
  @override
  _i5.UserRemoteDataSource get userRemoteDataSource => (super.noSuchMethod(
        Invocation.getter(#userRemoteDataSource),
        returnValue: _FakeUserRemoteDataSource_5(
          this,
          Invocation.getter(#userRemoteDataSource),
        ),
        returnValueForMissingStub: _FakeUserRemoteDataSource_5(
          this,
          Invocation.getter(#userRemoteDataSource),
        ),
      ) as _i5.UserRemoteDataSource);

  @override
  _i6.UserLocalDataSource get userLocalDataSoure => (super.noSuchMethod(
        Invocation.getter(#userLocalDataSoure),
        returnValue: _FakeUserLocalDataSource_6(
          this,
          Invocation.getter(#userLocalDataSoure),
        ),
        returnValueForMissingStub: _FakeUserLocalDataSource_6(
          this,
          Invocation.getter(#userLocalDataSoure),
        ),
      ) as _i6.UserLocalDataSource);

  @override
  _i7.Future<_i3.Either<_i8.Faliure, _i12.UserEntity>> signUp(
          {required _i10.SignInParams? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUp,
          [],
          {#params: params},
        ),
        returnValue: _i7.Future<_i3.Either<_i8.Faliure, _i12.UserEntity>>.value(
            _FakeEither_1<_i8.Faliure, _i12.UserEntity>(
          this,
          Invocation.method(
            #signUp,
            [],
            {#params: params},
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.Either<_i8.Faliure, _i12.UserEntity>>.value(
                _FakeEither_1<_i8.Faliure, _i12.UserEntity>(
          this,
          Invocation.method(
            #signUp,
            [],
            {#params: params},
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Faliure, _i12.UserEntity>>);

  @override
  _i7.Future<_i3.Either<_i8.Faliure, _i12.UserEntity?>> authUser() =>
      (super.noSuchMethod(
        Invocation.method(
          #authUser,
          [],
        ),
        returnValue:
            _i7.Future<_i3.Either<_i8.Faliure, _i12.UserEntity?>>.value(
                _FakeEither_1<_i8.Faliure, _i12.UserEntity?>(
          this,
          Invocation.method(
            #authUser,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.Either<_i8.Faliure, _i12.UserEntity?>>.value(
                _FakeEither_1<_i8.Faliure, _i12.UserEntity?>(
          this,
          Invocation.method(
            #authUser,
            [],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Faliure, _i12.UserEntity?>>);
}
